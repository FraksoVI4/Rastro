import sys
import os
from pathlib import Path
import pytest
import logging
from datetime import datetime
import json
from typing import Dict, List, Any
import platform
from PyQt6.QtWidgets import QApplication
import atexit

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
current_dir = Path(__file__).parent  # utils/
project_root = current_dir.parent    # src/
sys.path.insert(0, str(project_root))

from utils.logger import rastro_logger as logger

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Qt –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
_app = None

def get_qt_app():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Qt –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global _app
    if not _app:
        _app = QApplication.instance() or QApplication([])
    return _app

def cleanup_qt():
    """–û—á–∏—Å—Ç–∫–∞ Qt –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global _app
    if _app:
        _app.quit()
        _app = None

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
atexit.register(cleanup_qt)

class TestResult:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    def __init__(self, name: str, result: bool, message: str = "", duration: float = 0.0):
        self.name = name
        self.passed = result
        self.message = message
        self.duration = duration
        self.timestamp = datetime.now()

    def to_dict(self) -> Dict[str, Any]:
        return {
            'name': self.name,
            'passed': self.passed,
            'message': self.message,
            'duration': self.duration,
            'timestamp': self.timestamp.strftime('%Y-%m-%d %H:%M:%S')
        }

class TestRunner:
    def __init__(self):
        self.test_results: Dict[str, Any] = {
            'passed': 0,
            'failed': 0,
            'errors': 0,
            'skipped': 0,
            'total': 0
        }
        self.test_details: List[Dict] = []
        self.start_time = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self.base_dir = project_root.parent
        self.reports_dir = self.base_dir / "reports"
        self.reports_dir.mkdir(exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç–µ—Å—Ç–æ–≤
        self.tests_file = current_dir / "tests.py"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Qt –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.app = get_qt_app()

    def print_header(self):
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        header = f"""
{'='*80}
–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RASTRO
–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
{'='*80}

–°–∏—Å—Ç–µ–º–∞: {platform.system()}
Python: {platform.python_version()}
PyTest: {pytest.__version__}
{'='*80}
"""
        print(header)
        logger.info(header)

    def print_separator(self, char: str = '-'):
        """–í—ã–≤–æ–¥ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è"""
        separator = char * 80
        print(separator)
        logger.info(separator)

    def run_test_group(self, name: str, pattern: str) -> bool:
        """–ó–∞–ø—É—Å–∫ –≥—Ä—É–ø–ø—ã —Ç–µ—Å—Ç–æ–≤"""
        logger.info(f"\n–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: {name}")
        
        class TestResultCollector:
            def __init__(self):
                self.passed = 0
                self.failed = 0
                self.skipped = 0
                self.details = []

            def pytest_runtest_logreport(self, report):
                if report.when == "call":
                    test_name = report.nodeid.split("::")[-1]
                    if report.passed:
                        status = "PASSED"
                        self.passed += 1
                        logger.info(f"‚úì {test_name}: {status} ({report.duration:.2f}s)")
                    elif report.failed:
                        status = "FAILED"
                        self.failed += 1
                        logger.error(f"‚úó {test_name}: {status} ({report.duration:.2f}s)")
                        if report.longrepr:
                            logger.error(f"  –û—à–∏–±–∫–∞: {report.longrepr}")
                    else:
                        status = "SKIPPED"
                        self.skipped += 1
                        logger.warning(f"- {test_name}: {status} ({report.duration:.2f}s)")
                    
                    self.details.append({
                        'name': test_name,
                        'status': status,
                        'duration': report.duration,
                        'error': str(report.longrepr) if report.failed else None
                    })

        collector = TestResultCollector()
        
        try:
            result = pytest.main([
                str(self.tests_file),
                "-v",
                "-k", pattern,
                "--tb=short",
                "--color=yes"
            ], plugins=[collector])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.test_results['passed'] += collector.passed
            self.test_results['failed'] += collector.failed
            self.test_results['skipped'] += collector.skipped
            self.test_results['total'] += len(collector.details)
            self.test_details.extend(collector.details)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–ø–ø—ã
            success_rate = (collector.passed / len(collector.details)) * 100 if collector.details else 0
            logger.info(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–ø–ø—ã '{name}':")
            logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(collector.details)}")
            logger.info(f"–£—Å–ø–µ—à–Ω–æ: {collector.passed}")
            logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {collector.failed}")
            logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {collector.skipped}")
            logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n")
            
            return result == pytest.ExitCode.OK
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥—Ä—É–ø–ø—ã —Ç–µ—Å—Ç–æ–≤ {name}: {str(e)}")
            return False

    def generate_text_report(self) -> Path:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = self.reports_dir / f"test_report_{timestamp}.txt"
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        total = max(self.test_results['total'], 1)
        success_rate = (self.test_results['passed'] / total) * 100
        
        report_content = f"""
================================================================================
                            –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò RASTRO
================================================================================

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï:
--------------------
–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {platform.platform()}
–í–µ—Ä—Å–∏—è Python:        {platform.python_version()}
–í–µ—Ä—Å–∏—è PyTest:        {pytest.__version__}
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª:       {self.tests_file}

–û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ü–£–°–ö–ï:
--------------------------
–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:  {self.start_time.strftime('%d.%m.%Y %H:%M:%S')}
–ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:   {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:   {(datetime.now() - self.start_time).total_seconds():.2f} —Å–µ–∫.

–°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:
------------------
–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:         {self.test_results['total']}
–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ:     {self.test_results['passed']}
–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:           {self.test_results['failed']}
–ü—Ä–æ–ø—É—â–µ–Ω–æ:           {self.test_results['skipped']}
–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö:     {success_rate:.1f}%

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ì–†–£–ü–ü–ê–ú –¢–ï–°–¢–û–í:
============================

–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–ú –ß–ï–†–ù–û–ì–û –Ø–©–ò–ö–ê:
---------------------------------
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:
‚úì –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
‚úì –ù–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
‚úì –†–∞–±–æ—Ç–∞ –∫–Ω–æ–ø–æ–∫ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:
‚úì –û–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
‚úì –û—Ç–º–µ–Ω–∞/–ø–æ–≤—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π
‚úì –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ö–æ–ª—Å—Ç–∞
‚úì –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–∏—Å—Ç–∏

–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–ú –ë–ï–õ–û–ì–û –Ø–©–ò–ö–ê:
--------------------------------
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤:
‚úì –†–∞–±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
‚úì –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
‚úì –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–∞—Å—Ç–∏–∫–∞
‚úì –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ª–∏–Ω–∏–∏

–ü–û–î–†–û–ë–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:
===========================
"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
        failed_tests = []
        passed_tests = []
        skipped_tests = []
        
        for detail in self.test_details:
            test_info = (
                f"\n–¢–ï–°–¢: {detail['name']}\n"
                f"–°—Ç–∞—Ç—É—Å: {detail['status']}\n"
                f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {detail['duration']:.3f} —Å–µ–∫.\n"
            )
            if detail.get('error'):
                test_info += f"–û–®–ò–ë–ö–ê:\n{detail['error']}\n"
            test_info += f"{'-'*80}\n"
            
            if detail['status'] == 'FAILED':
                failed_tests.append(test_info)
            elif detail['status'] == 'PASSED':
                passed_tests.append(test_info)
            else:
                skipped_tests.append(test_info)

        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        if failed_tests:
            report_content += "\n–ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´ üî¥\n" + "="*40 + "\n"
            report_content += "".join(failed_tests)

        # –ó–∞—Ç–µ–º —É—Å–ø–µ—à–Ω—ã–µ
        if passed_tests:
            report_content += "\n–£–°–ü–ï–®–ù–´–ï –¢–ï–°–¢–´ ‚úÖ\n" + "="*40 + "\n"
            report_content += "".join(passed_tests)

        # –ò –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ
        if skipped_tests:
            report_content += "\n–ü–†–û–ü–£–©–ï–ù–ù–´–ï –¢–ï–°–¢–´ ‚ö†Ô∏è\n" + "="*40 + "\n"
            report_content += "".join(skipped_tests)

        report_content += f"""
–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:
==========
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {('–£–°–ü–ï–®–ù–û ‚úÖ' if success_rate == 100 else '‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò')}
–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_rate:.1f}%
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {'–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ' if success_rate == 100 else '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö'}

================================================================================
                                –ö–û–ù–ï–¶ –û–¢–ß–ï–¢–ê
================================================================================
"""

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file.write_text(report_content, encoding='utf-8')
        return report_file

    def generate_json_report(self) -> Path:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON-–æ—Ç—á–µ—Ç–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = self.reports_dir / f"test_report_{timestamp}.json"
        
        report_data = {
            'system_info': {
                'platform': platform.platform(),
                'python_version': platform.python_version(),
                'pytest_version': pytest.__version__,
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'test_file': str(self.tests_file)
            },
            'summary': {
                'start_time': self.start_time.strftime('%Y-%m-%d %H:%M:%S'),
                'end_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'duration': (datetime.now() - self.start_time).total_seconds(),
                **self.test_results,
                'success_rate': (self.test_results['passed'] / max(self.test_results['total'], 1)) * 100
            },
            'tests': self.test_details
        }
        
        report_file.write_text(
            json.dumps(report_data, indent=4, ensure_ascii=False), 
            encoding='utf-8'
        )
        return report_file

    def run_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        try:
            self.print_header()
            
            if not self.tests_file.exists():
                logger.error(f"–§–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.tests_file}")
                return False

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            result = self.run_test_group("–¢–ï–°–¢–´", "")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
            text_report = self.generate_text_report()
            json_report = self.generate_json_report()
            
            print(f"\n–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {text_report}")
            print(f"JSON –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {json_report}")
            
            logger.info(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {text_report}")
            logger.info(f"JSON –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {json_report}")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {str(e)}")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    try:
        runner = TestRunner()
        success = runner.run_tests()
        return 0 if success else 1
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {str(e)}")
        return 1
    finally:
        cleanup_qt()

if __name__ == "__main__":
    exit_code = main()
    exit(exit_code)